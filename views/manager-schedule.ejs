<!DOCTYPE html>
<html>
<head>
  <title>Manager Schedule</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    #employee-table {
      display: none;
    }
    .form-section {
      margin-bottom: 20px;
    }
  </style>
</head>
<body class="bg-light">

<div class="container mt-5">
  <h2 class="mb-4 text-primary text-center">üóìÔ∏è Manager Schedule</h2>

  <div id="loading-status" class="mb-3 text-secondary"></div>

  <form action="/dashboard/manager/schedule" method="POST" class="card p-4 shadow-sm bg-white">
    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
    <!-- Warning Alert -->
    <div id="validationWarning" class="alert alert-danger d-none mb-3" role="alert"></div>

    <!-- Employee selection -->
    <div class="form-section">
      <label class="form-label"><strong>Select Employees:</strong></label>
      <div id="employee-checkboxes" class="border rounded p-3 bg-light" style="max-height: 200px; overflow-y: auto;">
        <% employees.forEach(emp => { %>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="emp_ids" value="<%= emp.empCode %>" onchange="onEmployeeSelection()">
            <label class="form-check-label">
              <%= emp.empCode %> - <%= emp.name %>
            </label>
          </div>
        <% }) %>
      </div>
    </div>

    <!-- Selected employee details -->
    <div class="form-section">
      <table id="employee-table" class="table table-bordered table-striped mt-3" style="display:none;">
        <thead class="table-primary">
          <tr>
            <th>Emp ID</th>
            <th>Name</th>
            <th>Payroll Company</th>
            <th>Division</th>
            <th>Practice</th>
            <th>Practice Head</th>
          </tr>
        </thead>
        <tbody id="employee-table-body"></tbody>
      </table>
    </div>

    <!-- Project(s) allocation -->
    <div class="form-section" id="project-allocation-section">
      <!-- Dynamic project rows will be inserted here -->
    </div>

    <!-- Date range -->
    <div class="row form-section">
      <div class="col-md-6">
        <label for="start_date" class="form-label">From Date:</label>
        <input type="date" name="start_date" id="start_date" class="form-control" required>
      </div>
      <div class="col-md-6">
        <label for="end_date" class="form-label">To Date:</label>
        <input type="date" name="end_date" id="end_date" class="form-control" required>
      </div>
    </div>

    <!-- Submit button -->
    <div class="text-center mt-4">
      <button type="submit" class="btn btn-success px-5">
        ‚úÖ Assign Schedule
      </button>
    </div>
  </form>
</div>

<!-- ‚úÖ JavaScript -->
<script>
  // Helper: fetch and show selected employee details
  async function fetchEmployeeDetails(selected) {
    const tbody = document.getElementById('employee-table-body');
    const table = document.getElementById('employee-table');
    const loading = document.getElementById('loading-status');
    tbody.innerHTML = '';
    table.style.display = selected.length ? 'table' : 'none';
    if (!selected.length) return;
    loading.textContent = 'Fetching employee details...';
    for (const empCode of selected) {
      try {
        const res = await fetch(`/api/employee/${empCode}`);
        if (!res.ok) throw new Error();
        const emp = await res.json();
        const row = `
          <tr>
            <td>${empCode}</td>
            <td>${emp.name || ''}</td>
            <td>${emp.payrollCompany || ''}</td>
            <td>${emp.division || ''}</td>
            <td>${emp.practice || ''}</td>
            <td>${emp.practiceHead || ''}</td>
          </tr>`;
        tbody.insertAdjacentHTML('beforeend', row);
      } catch {
        alert(`Failed to fetch employee: ${empCode}`);
      }
    }
    loading.textContent = '';
  }

  // UI logic for project allocation
  function onEmployeeSelection() {
    const selected = Array.from(document.querySelectorAll('input[name="emp_ids"]:checked')).map(cb => cb.value);
    fetchEmployeeDetails(selected);
    const section = document.getElementById('project-allocation-section');
    section.innerHTML = '';
    if (!selected.length) return;
    // For both single and multiple employees, allow multiple project selection and submit as arrays
    section.innerHTML = `<label class='form-label'><strong>Allocate Project(s):</strong></label>
      <div id='project-rows'></div>
      <button type='button' class='btn btn-outline-primary btn-sm mt-2' onclick='addProjectRow()'>‚ûï Add Project</button>`;
    addProjectRow();
    // Enable validation on all initial inputs
    setTimeout(() => {
      document.querySelectorAll('.hours-input').forEach(inp => {
        inp.oninput = function() { validateHoursInput(this); };
      });
    }, 100);
  }

  // Add a new project row for single employee allocation
  function addProjectRow() {
    const container = document.getElementById('project-rows');
    const idx = container ? container.children.length : 0;
    const row = document.createElement('div');
    row.className = 'row mb-2';
    row.innerHTML = `
      <div class='col-md-6'>
        <select name='project_ids[]' class='form-select' required>
          <option value=''>-- Select Project --</option>
          <% projects.forEach(project => { %>
            <option value='<%= project._id %>'><%= project.projectName %></option>
          <% }) %>
        </select>
      </div>
      <div class='col-md-3'>
        <input type='number' name='hours_list[]' class='form-control hours-input' min='1' max='8' placeholder='Hours (1-8)' required oninput='validateHoursInput(this)'>
        <div class='text-danger small hours-warning' style='display:none;'></div>
      </div>
      <div class='col-md-2'>
        <button type='button' class='btn btn-outline-danger btn-sm' onclick='this.parentElement.parentElement.remove()'>üóëÔ∏è</button>
      </div>
    `;
    container.appendChild(row);
  }

  // Real-time validation for hours input (single employee mode)
  function validateHoursInput(input) {
    const value = Number(input.value);
    const warningDiv = input.parentElement.querySelector('.hours-warning');
    let valid = true;
    let msg = '';
    if (isNaN(value) || value < 1 || value > 8) {
      valid = false;
      msg = 'Hours must be between 1 and 8.';
    }
    // Sum validation for all project rows
    if (valid) {
      const allInputs = document.querySelectorAll('.hours-input');
      let total = 0;
      allInputs.forEach(inp => {
        const v = Number(inp.value);
        if (!isNaN(v)) total += v;
      });
      if (total < 1 || total > 8) {
        valid = false;
        msg = 'Total hours for this employee must be between 1 and 8 (inclusive) per day.';
      }
    }
    if (!valid) {
      warningDiv.textContent = msg;
      warningDiv.style.display = 'block';
      document.getElementById('validationWarning').textContent = msg;
      document.getElementById('validationWarning').classList.remove('d-none');
    } else {
      warningDiv.textContent = '';
      warningDiv.style.display = 'none';
      document.getElementById('validationWarning').textContent = '';
      document.getElementById('validationWarning').classList.add('d-none');
    }
    // Block submit if invalid
    document.querySelector('button[type="submit"]').disabled = !valid;
  }

  // Real-time validation for multi-employee mode
  function validateMultiEmpHours(input) {
    const value = Number(input.value);
    const warningDiv = input.parentElement.querySelector('.hours-warning');
    let valid = true;
    let msg = '';
    if (isNaN(value) || value < 1 || value > 8) {
      valid = false;
      msg = 'Hours must be between 1 and 8.';
    }
    if (!valid) {
      warningDiv.textContent = msg;
      warningDiv.style.display = 'block';
      document.getElementById('validationWarning').textContent = msg;
      document.getElementById('validationWarning').classList.remove('d-none');
    } else {
      warningDiv.textContent = '';
      warningDiv.style.display = 'none';
      document.getElementById('validationWarning').textContent = '';
      document.getElementById('validationWarning').classList.add('d-none');
    }
    document.querySelector('button[type="submit"]').disabled = !valid;
  }
</script>

</body>
</html>
