<!DOCTYPE html>
<html>
<head>
  <title>Master Data Management</title>
  <link rel="stylesheet" href="/stylesheets/styles.css">
  <style>
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    .dashboard-header-left a,
    .dashboard-header-right a {
      font-size: 15px;
    }
    thead th {
      position: sticky;
      top: 0;
      z-index: 2;
    }
    .search-bar {
      margin-bottom: 20px;
    }
    .pagination {
      margin-top: 20px;
      display: flex;
      justify-content: center;
    }
    .pagination a,
    .pagination span {
      margin: 0 5px;
      padding: 5px 10px;
      background: #2c3e50;
      color: white;
      text-decoration: none;
      border-radius: 5px;
    }
    .pagination .active {
      background: #18bc9c;
      font-weight: bold;
    }
    
    /* Master Selection Dropdown */
    .master-selector {
      background: linear-gradient(135deg, #3498db, #2c3e50);
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 30px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .master-selector h2 {
      color: white;
      margin: 0 0 15px 0;
      text-align: center;
      font-size: 24px;
    }
    
    .master-dropdown {
      display: flex;
      justify-content: center;
      gap: 10px;
      align-items: center;
    }
    
    .master-dropdown label {
      color: white;
      font-size: 16px;
      font-weight: 600;
    }
    
    .master-dropdown select {
      padding: 12px 20px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      background: white;
      color: #2c3e50;
      min-width: 200px;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .master-dropdown select:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(255,255,255,0.3);
    }
    
    /* Content sections */
    .master-content {
      display: none;
    }
    
    .master-content.active {
      display: block;
    }
    
    .master-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding: 15px 0;
      border-bottom: 2px solid #3498db;
    }
    
    .master-header h1 {
      color: #2c3e50;
      margin: 0;
      font-size: 28px;
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      font-size: 18px;
      color: #7f8c8d;
    }
    
    .error-message {
      background: #e74c3c;
      color: white;
      padding: 15px;
      border-radius: 8px;
      margin: 20px 0;
      text-align: center;
    }
  </style>
</head>
<body>

<div class="container">
  <!-- Master Selection -->
  <div class="master-selector">
    <h2>🏢 Master Data Management</h2>
    <div class="master-dropdown">
      <label for="masterSelect">Select Master:</label>
      <select id="masterSelect">
        <option value="">-- Choose a Master --</option>
        <option value="employees">👥 Employee Master</option>
        <option value="projects">📁 Project Master</option>
        <option value="practices">🎯 Practice Master</option>
      </select>
    </div>
  </div>

  <!-- Loading Indicator -->
  <div id="loadingIndicator" class="loading" style="display: none;">
    <div>🔄 Loading...</div>
  </div>

  <!-- Error Message -->
  <div id="errorMessage" class="error-message" style="display: none;"></div>

  <!-- Employees Master Content -->
  <div id="employeesContent" class="master-content">
    <div class="master-header">
      <h1>👥 Employee Master</h1>
    </div>
    
    <!-- Search + Upload Employees + Add Employee Button -->
    <form class="search-bar" style="margin-bottom: 15px; display: flex; gap: 10px; align-items: center;">
      <input type="text" id="employeeSearchInput" placeholder="🔍Search employees..." style="width: 220px; min-width: 0;" />
      <a href="/upload-employees" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 10px; margin-top: -20px; position: relative; display: inline-block;">📤 Upload Employees</a>
      <a href="/employees/add" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 5px; margin-top: -20px; position: relative; display: inline-block;">➕ Add Employee</a>
      <button id="employeeBulkDeleteBtn" style="background: #3498db; color: white; padding: 10px 15px; border: none; border-radius: 8px; cursor: pointer; display: none; margin-left: 10px; margin-top: -20px; position: relative;">🗑 Delete Selected</button>
    </form>

    <!-- Employees Table -->
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th><input type="checkbox" id="employeeSelectAll" style="cursor: pointer;"></th>
            <th>Emp Code</th>
            <th>Name</th>
            <th>Payroll Company</th>
            <th>Division</th>
            <th>Location</th>
            <th>Designation</th>
            <th>Home Practice</th>
            <th>Practice Manager</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="employeeTableBody">
          <!-- Employee data will be loaded here -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Projects Master Content -->
  <div id="projectsContent" class="master-content">
    <div class="master-header">
      <h1>📁 Project Master</h1>
    </div>
    
    <!-- Search & Controls -->
    <form class="search-bar" style="margin-bottom: 20px; display: flex; gap: 10px; align-items: center;">
      <input type="text" id="projectSearchInput" placeholder="🔍 Search projects..." style="padding: 12px; font-size: 15px; border-radius: 10px; border: 1px solid #ccc; width: 250px;" />
      <a href="/upload-project-master" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 10px; margin-top: -20px; position: relative; display: inline-block;">📤 Upload Projects</a>
      <a href="#" id="addProjectBtn" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 5px; margin-top: -20px; position: relative; display: inline-block;">➕ Add Project</a>
      <button id="projectBulkDeleteBtn" style="background: #3498db; color: white; padding: 10px 15px; border: none; border-radius: 8px; cursor: pointer; display: none; margin-left: 10px; margin-top: -20px; position: relative;">🗑 Delete Selected</button>
    </form>

    <!-- Projects Table -->
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th><input type="checkbox" id="projectSelectAll" style="cursor: pointer;"></th>
            <th>Project Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Project Manager</th>
            <th>CBSL Client</th>
            <th>DIH Division</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="projectTableBody">
          <!-- Project data will be loaded here -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Practices Master Content -->
  <div id="practicesContent" class="master-content">
    <div class="master-header">
      <h1>🎯 Practice Master</h1>
    </div>
    
    <!-- Search & Controls -->
    <form class="search-bar" style="margin-bottom: 20px; display: flex; gap: 10px; align-items: center;">
      <input type="text" id="practiceSearchInput" placeholder="🔍 Search practices..." style="padding: 12px; font-size: 15px; border-radius: 10px; border: 1px solid #ccc; width: 250px;" />
      <a href="/upload-practice-master" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 10px; margin-top: -20px; position: relative; display: inline-block;">📤 Upload Practices</a>
      <a href="#" id="addPracticeBtn" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 5px; margin-top: -20px; position: relative; display: inline-block;">➕ Add Practice</a>
      <button id="practiceBulkDeleteBtn" style="background: #3498db; color: white; padding: 10px 15px; border: none; border-radius: 8px; cursor: pointer; display: none; margin-left: 10px; margin-top: -20px; position: relative;">🗑 Delete Selected</button>
    </form>

    <!-- Practices Table -->
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th><input type="checkbox" id="practiceSelectAll" style="cursor: pointer;"></th>
            <th>SW Practice</th>
            <th>Practice Manager</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="practiceTableBody">
          <!-- Practice data will be loaded here -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Project Modal (for Add/Edit) -->
<div id="projectModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.5); align-items:center; justify-content:center; z-index:1000;">
  <div style="background:#fff; padding:24px 20px; border-radius:12px; width:100%; max-width:600px; max-height:90vh; overflow-y:auto; box-sizing:border-box;">
    <h2 id="projectModalTitle" style="margin-bottom: 20px;">Add Project</h2>
    <form id="projectForm" method="POST" action="/project-master/add" style="display: grid; gap: 16px;">
      <input type="hidden" name="_id" id="projectId">

      <div>
        <label for="projectName">📁 Project Name</label>
        <input type="text" name="projectName" id="projectName" required style="width: 100%; padding: 10px;">
      </div>

      <div style="display: flex; gap: 16px;">
        <div style="flex: 1;">
          <label for="startDate">📅 Start Date</label>
          <input type="date" name="startDate" id="startDate" required style="width: 100%; padding: 10px;">
        </div>
        <div style="flex: 1;">
          <label for="endDate">📅 End Date</label>
          <input type="date" name="endDate" id="endDate" required style="width: 100%; padding: 10px;">
        </div>
      </div>

      <div>
        <label for="projectManager">👨‍💼 Project Manager</label>
        <input type="text" name="projectManager" id="projectManager" required style="width: 100%; padding: 10px;">
      </div>

      <div>
        <label for="cbslClient">🏢 CBSL Client</label>
        <input type="text" name="cbslClient" id="cbslClient" required style="width: 100%; padding: 10px;">
      </div>

      <div>
        <label for="dihClient">🏭 DIH Division</label>
        <input type="text" name="dihClient" id="dihClient" required style="width: 100%; padding: 10px;">
      </div>

      <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 20px;">
        <button type="button" id="cancelProjectModal" style="background: #95a5a6; color: white; padding: 12px 24px; border: none; border-radius: 6px; cursor: pointer;">Cancel</button>
        <button type="submit" style="background: #3498db; color: white; padding: 12px 24px; border: none; border-radius: 6px; cursor: pointer;">Save Project</button>
      </div>
    </form>
  </div>
</div>

<!-- Practice Modal (for Add/Edit) -->
<div id="practiceModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.5); align-items:center; justify-content:center; z-index:1000;">
  <div style="background:#fff; padding:24px; border-radius:8px; min-width:300px; position:relative;">
    <h3 id="practiceModalTitle">Add Practice</h3>
    <form id="practiceForm" method="POST" action="/practice-master/add">
      <input type="hidden" name="_id" id="practiceId">
      <div style="margin-bottom:12px;">
        <label>Practice Name:</label><br>
        <input type="text" name="practiceName" id="practiceName" required style="width:100%;">
      </div>
      <div style="margin-bottom:12px;">
        <label>Practice Manager:</label><br>
        <input type="text" name="practiceManager" id="practiceManager" required style="width:100%;">
      </div>
      <div style="text-align:right;">
        <button type="button" id="cancelPracticeModal" style="margin-right:8px;">Cancel</button>
        <button type="submit" id="savePracticeBtn">Save</button>
      </div>
    </form>
  </div>
</div>

<script>
  const csrfToken = "<%= csrfToken %>";
  const masterSelect = document.getElementById('masterSelect');
  const loadingIndicator = document.getElementById('loadingIndicator');
  const errorMessage = document.getElementById('errorMessage');
  
  // Content sections
  const employeesContent = document.getElementById('employeesContent');
  const projectsContent = document.getElementById('projectsContent');
  const practicesContent = document.getElementById('practicesContent');
  
  // Master selection handler
  masterSelect.addEventListener('change', function() {
    const selectedMaster = this.value;
    hideAllContent();
    
    if (selectedMaster) {
      showLoading();
      loadMasterData(selectedMaster);
    }
  });
  
  function hideAllContent() {
    employeesContent.classList.remove('active');
    projectsContent.classList.remove('active');
    practicesContent.classList.remove('active');
    hideLoading();
    hideError();
  }
  
  function showLoading() {
    loadingIndicator.style.display = 'block';
  }
  
  function hideLoading() {
    loadingIndicator.style.display = 'none';
  }
  
  function showError(message) {
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
  }
  
  function hideError() {
    errorMessage.style.display = 'none';
  }
  
  async function loadMasterData(masterType) {
    try {
      switch(masterType) {
        case 'employees':
          await loadEmployees();
          employeesContent.classList.add('active');
          break;
        case 'projects':
          await loadProjects();
          projectsContent.classList.add('active');
          break;
        case 'practices':
          await loadPractices();
          practicesContent.classList.add('active');
          break;
      }
      hideLoading();
    } catch (error) {
      hideLoading();
      showError('Failed to load data: ' + error.message);
    }
  }
  
  async function loadEmployees() {
    const response = await fetch('/api/employees/all');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || 'Failed to load employees');
    }
    
    renderEmployeesTable(data.employees);
    initializeEmployeeFunctionality();
  }
  
  async function loadProjects() {
    const response = await fetch('/api/projects/all');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || 'Failed to load projects');
    }
    
    renderProjectsTable(data.projects);
    initializeProjectFunctionality();
  }
  
  async function loadPractices() {
    const response = await fetch('/api/practices/all');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || 'Failed to load practices');
    }
    
    renderPracticesTable(data.practices);
    initializePracticeFunctionality();
  }
  
  function renderEmployeesTable(employees) {
    const tbody = document.getElementById('employeeTableBody');
    tbody.innerHTML = '';
    
    if (!employees.length) {
      tbody.innerHTML = '<tr><td colspan="10" style="text-align:center;">No employees found.</td></tr>';
      return;
    }
    
    employees.forEach(emp => {
      tbody.innerHTML += `
        <tr>
          <td><input type="checkbox" class="employee-row-checkbox" value="${emp.empCode}" style="cursor: pointer;"></td>
          <td>${emp.empCode}</td>
          <td>👤 ${emp.name}</td>
          <td>${emp.payrollCompany}</td>
          <td>${emp.division}</td>
          <td>${emp.location}</td>
          <td>${emp.designation}</td>
          <td>${emp.homePractice}</td>
          <td>${emp.practiceManager}</td>
          <td class="actions">
            <form action="/employees/${emp.empCode}/edit" method="get" style="display:inline;">
              <button type="submit" style="background: #3498db; color: #222; border: none; border-radius: 5px; padding: 5px 12px; cursor: pointer; font-size: 14px;">✏ Edit</button>
            </form> |
            <a href="#" onclick="deleteEmployee('${emp.empCode}')" style="color: red; font-size: 22px; vertical-align: middle; text-decoration: none;">🗑️</a>
          </td>
        </tr>`;
    });
  }
  
  function renderProjectsTable(projects) {
    const tbody = document.getElementById('projectTableBody');
    tbody.innerHTML = '';
    
    if (!projects.length) {
      tbody.innerHTML = '<tr><td colspan="8" style="text-align:center;">No project master records found.</td></tr>';
      return;
    }
    
    projects.forEach((project, idx) => {
      tbody.innerHTML += `
        <tr data-idx="${idx}" data-id="${project._id}">
          <td><input type="checkbox" class="project-row-checkbox" value="${project._id}" style="cursor: pointer;"></td>
          <td>${project.projectName}</td>
          <td>${project.startDate}</td>
          <td>${project.endDate}</td>
          <td>${project.projectManager}</td>
          <td>${project.cbslClient}</td>
          <td>${project.dihClient}</td>
          <td class="actions">
            <button type="button" class="edit-project-btn" data-idx="${idx}" style="background: #3498db; color: #222; border: none; border-radius: 5px; padding: 5px 12px; cursor: pointer; font-size: 14px;">✏ Edit</button>
            <form method="POST" action="/project-master/delete/${project._id}" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this project?');">
              <button type="submit" style="font-size: 22px; line-height: 1; padding: 2px 10px;">🗑️</button>
            </form>
          </td>
        </tr>`;
    });
  }
  
  function renderPracticesTable(practices) {
    const tbody = document.getElementById('practiceTableBody');
    tbody.innerHTML = '';
    
    if (!practices.length) {
      tbody.innerHTML = '<tr><td colspan="4" style="text-align: center;">No practice records found.</td></tr>';
      return;
    }
    
    practices.forEach((practice, idx) => {
      tbody.innerHTML += `
        <tr data-idx="${idx}" data-id="${practice._id}">
          <td><input type="checkbox" class="practice-row-checkbox" value="${practice._id}" style="cursor: pointer;"></td>
          <td>${practice.practiceName}</td>
          <td>${practice.practiceManager}</td>
          <td class="actions">
            <button type="button" class="edit-practice-btn" data-idx="${idx}" style="background: #3498db; color: #222; border: none; border-radius: 5px; padding: 5px 12px; cursor: pointer; font-size: 14px;">✏ Edit</button>
            <form method="POST" action="/practice-master/delete/${practice._id}" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this practice?');">
              <button type="submit" style="font-size: 22px; line-height: 1; padding: 2px 10px;">🗑️</button>
            </form>
          </td>
        </tr>`;
    });
  }
  
  // Employee functionality
  function initializeEmployeeFunctionality() {
    // Search functionality
    const searchInput = document.getElementById('employeeSearchInput');
    const tableBody = document.getElementById('employeeTableBody');

    searchInput.addEventListener('input', async function () {
      const query = this.value;
      const response = await fetch(`/api/employees/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      renderEmployeesTable(data.employees);
      updateEmployeeCheckboxHandlers();
    });
    
    updateEmployeeCheckboxHandlers();
  }
  
  function updateEmployeeCheckboxHandlers() {
    const selectAll = document.getElementById('employeeSelectAll');
    const rowCheckboxes = document.querySelectorAll('.employee-row-checkbox');
    const bulkDeleteBtn = document.getElementById('employeeBulkDeleteBtn');
    
    selectAll.onchange = function() {
      rowCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateEmployeeBulkDeleteButton();
    };
    
    rowCheckboxes.forEach(checkbox => {
      checkbox.onchange = function() {
        updateEmployeeSelectAllState();
        updateEmployeeBulkDeleteButton();
      };
    });
    
    bulkDeleteBtn.onclick = bulkDeleteEmployees;
  }
  
  function updateEmployeeSelectAllState() {
    const selectAll = document.getElementById('employeeSelectAll');
    const rowCheckboxes = document.querySelectorAll('.employee-row-checkbox');
    const checkedBoxes = document.querySelectorAll('.employee-row-checkbox:checked');
    
    if (checkedBoxes.length === 0) {
      selectAll.indeterminate = false;
      selectAll.checked = false;
    } else if (checkedBoxes.length === rowCheckboxes.length) {
      selectAll.indeterminate = false;
      selectAll.checked = true;
    } else {
      selectAll.indeterminate = true;
    }
  }
  
  function updateEmployeeBulkDeleteButton() {
    const checkedBoxes = document.querySelectorAll('.employee-row-checkbox:checked');
    const bulkDeleteBtn = document.getElementById('employeeBulkDeleteBtn');
    
    bulkDeleteBtn.style.display = checkedBoxes.length > 0 ? 'inline-block' : 'none';
  }
  
  function deleteEmployee(empCode) {
    if (confirm("Are you sure you want to delete this employee?")) {
      fetch(`/employees/${empCode}/delete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': csrfToken
        }
      })
      .then(res => {
        if (res.ok) {
          loadEmployees(); // Reload the table
        } else {
          alert("❌ Failed to delete employee.");
        }
      });
    }
  }
  
  function bulkDeleteEmployees() {
    const checkedBoxes = document.querySelectorAll('.employee-row-checkbox:checked');
    const empCodes = Array.from(checkedBoxes).map(cb => cb.value);
    
    if (empCodes.length === 0) {
      alert('Please select employees to delete.');
      return;
    }
    
    if (confirm(`Are you sure you want to delete ${empCodes.length} selected employee(s)?`)) {
      fetch('/employees/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': csrfToken
        },
        body: JSON.stringify({ empCodes: empCodes })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          loadEmployees(); // Reload the table
        } else {
          alert('Error deleting employees: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error deleting employees');
      });
    }
  }
  
  // Project functionality
  function initializeProjectFunctionality() {
    // Search functionality
    const searchInput = document.getElementById('projectSearchInput');
    searchInput.addEventListener('input', function() {
      filterProjectTable(this.value);
    });
    
    // Add project button
    document.getElementById('addProjectBtn').onclick = function(e) {
      e.preventDefault();
      openProjectModal();
    };
    
    // Modal functionality
    document.getElementById('cancelProjectModal').onclick = closeProjectModal;
    document.getElementById('projectModal').onclick = function(e) {
      if (e.target === this) closeProjectModal();
    };
    
    // Edit buttons
    document.querySelectorAll('.edit-project-btn').forEach(btn => {
      btn.onclick = function() {
        const idx = this.dataset.idx;
        editProject(idx);
      };
    });
    
    updateProjectCheckboxHandlers();
  }
  
  function filterProjectTable(query) {
    const rows = document.querySelectorAll('#projectTableBody tr');
    rows.forEach(row => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(query.toLowerCase()) ? '' : 'none';
    });
  }
  
  function updateProjectCheckboxHandlers() {
    const selectAll = document.getElementById('projectSelectAll');
    const rowCheckboxes = document.querySelectorAll('.project-row-checkbox');
    const bulkDeleteBtn = document.getElementById('projectBulkDeleteBtn');
    
    selectAll.onchange = function() {
      rowCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateProjectBulkDeleteButton();
    };
    
    rowCheckboxes.forEach(checkbox => {
      checkbox.onchange = function() {
        updateProjectSelectAllState();
        updateProjectBulkDeleteButton();
      };
    });
    
    bulkDeleteBtn.onclick = bulkDeleteProjects;
  }
  
  function updateProjectSelectAllState() {
    const selectAll = document.getElementById('projectSelectAll');
    const rowCheckboxes = document.querySelectorAll('.project-row-checkbox');
    const checkedBoxes = document.querySelectorAll('.project-row-checkbox:checked');
    
    if (checkedBoxes.length === 0) {
      selectAll.indeterminate = false;
      selectAll.checked = false;
    } else if (checkedBoxes.length === rowCheckboxes.length) {
      selectAll.indeterminate = false;
      selectAll.checked = true;
    } else {
      selectAll.indeterminate = true;
    }
  }
  
  function updateProjectBulkDeleteButton() {
    const checkedBoxes = document.querySelectorAll('.project-row-checkbox:checked');
    const bulkDeleteBtn = document.getElementById('projectBulkDeleteBtn');
    
    bulkDeleteBtn.style.display = checkedBoxes.length > 0 ? 'inline-block' : 'none';
  }
  
  function openProjectModal(projectData = null) {
    const modal = document.getElementById('projectModal');
    const form = document.getElementById('projectForm');
    const title = document.getElementById('projectModalTitle');
    
    if (projectData) {
      title.textContent = 'Edit Project';
      form.action = '/project-master/edit';
      form.querySelector('#projectId').value = projectData._id;
      form.querySelector('#projectName').value = projectData.projectName;
      form.querySelector('#startDate').value = projectData.startDate;
      form.querySelector('#endDate').value = projectData.endDate;
      form.querySelector('#projectManager').value = projectData.projectManager;
      form.querySelector('#cbslClient').value = projectData.cbslClient;
      form.querySelector('#dihClient').value = projectData.dihClient;
    } else {
      title.textContent = 'Add Project';
      form.action = '/project-master/add';
      form.reset();
      form.querySelector('#projectId').value = '';
    }
    
    modal.style.display = 'flex';
  }
  
  function closeProjectModal() {
    document.getElementById('projectModal').style.display = 'none';
  }
  
  function editProject(idx) {
    // Get project data from the table row
    const row = document.querySelector(`tr[data-idx="${idx}"]`);
    const projectData = {
      _id: row.dataset.id,
      projectName: row.cells[1].textContent,
      startDate: row.cells[2].textContent,
      endDate: row.cells[3].textContent,
      projectManager: row.cells[4].textContent,
      cbslClient: row.cells[5].textContent,
      dihClient: row.cells[6].textContent
    };
    openProjectModal(projectData);
  }
  
  function bulkDeleteProjects() {
    const checkedBoxes = document.querySelectorAll('.project-row-checkbox:checked');
    const projectIds = Array.from(checkedBoxes).map(cb => cb.value);
    
    if (projectIds.length === 0) {
      alert('Please select projects to delete.');
      return;
    }
    
    if (confirm(`Are you sure you want to delete ${projectIds.length} selected project(s)?`)) {
      fetch('/project-master/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': csrfToken
        },
        body: JSON.stringify({ projectIds: projectIds })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          loadProjects(); // Reload the table
        } else {
          alert('Error deleting projects: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error deleting projects');
      });
    }
  }
  
  // Practice functionality
  function initializePracticeFunctionality() {
    // Search functionality
    const searchInput = document.getElementById('practiceSearchInput');
    searchInput.addEventListener('input', function() {
      filterPracticeTable(this.value);
    });
    
    // Add practice button
    document.getElementById('addPracticeBtn').onclick = function(e) {
      e.preventDefault();
      openPracticeModal();
    };
    
    // Modal functionality
    document.getElementById('cancelPracticeModal').onclick = closePracticeModal;
    document.getElementById('practiceModal').onclick = function(e) {
      if (e.target === this) closePracticeModal();
    };
    
    // Edit buttons
    document.querySelectorAll('.edit-practice-btn').forEach(btn => {
      btn.onclick = function() {
        const idx = this.dataset.idx;
        editPractice(idx);
      };
    });
    
    updatePracticeCheckboxHandlers();
  }
  
  function filterPracticeTable(query) {
    const rows = document.querySelectorAll('#practiceTableBody tr');
    rows.forEach(row => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(query.toLowerCase()) ? '' : 'none';
    });
  }
  
  function updatePracticeCheckboxHandlers() {
    const selectAll = document.getElementById('practiceSelectAll');
    const rowCheckboxes = document.querySelectorAll('.practice-row-checkbox');
    const bulkDeleteBtn = document.getElementById('practiceBulkDeleteBtn');
    
    selectAll.onchange = function() {
      rowCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updatePracticeBulkDeleteButton();
    };
    
    rowCheckboxes.forEach(checkbox => {
      checkbox.onchange = function() {
        updatePracticeSelectAllState();
        updatePracticeBulkDeleteButton();
      };
    });
    
    bulkDeleteBtn.onclick = bulkDeletePractices;
  }
  
  function updatePracticeSelectAllState() {
    const selectAll = document.getElementById('practiceSelectAll');
    const rowCheckboxes = document.querySelectorAll('.practice-row-checkbox');
    const checkedBoxes = document.querySelectorAll('.practice-row-checkbox:checked');
    
    if (checkedBoxes.length === 0) {
      selectAll.indeterminate = false;
      selectAll.checked = false;
    } else if (checkedBoxes.length === rowCheckboxes.length) {
      selectAll.indeterminate = false;
      selectAll.checked = true;
    } else {
      selectAll.indeterminate = true;
    }
  }
  
  function updatePracticeBulkDeleteButton() {
    const checkedBoxes = document.querySelectorAll('.practice-row-checkbox:checked');
    const bulkDeleteBtn = document.getElementById('practiceBulkDeleteBtn');
    
    bulkDeleteBtn.style.display = checkedBoxes.length > 0 ? 'inline-block' : 'none';
  }
  
  function openPracticeModal(practiceData = null) {
    const modal = document.getElementById('practiceModal');
    const form = document.getElementById('practiceForm');
    const title = document.getElementById('practiceModalTitle');
    
    if (practiceData) {
      title.textContent = 'Edit Practice';
      form.action = '/practice-master/edit';
      form.querySelector('#practiceId').value = practiceData._id;
      form.querySelector('#practiceName').value = practiceData.practiceName;
      form.querySelector('#practiceManager').value = practiceData.practiceManager;
    } else {
      title.textContent = 'Add Practice';
      form.action = '/practice-master/add';
      form.reset();
      form.querySelector('#practiceId').value = '';
    }
    
    modal.style.display = 'flex';
  }
  
  function closePracticeModal() {
    document.getElementById('practiceModal').style.display = 'none';
  }
  
  function editPractice(idx) {
    // Get practice data from the table row
    const row = document.querySelector(`tr[data-idx="${idx}"]`);
    const practiceData = {
      _id: row.dataset.id,
      practiceName: row.cells[1].textContent,
      practiceManager: row.cells[2].textContent
    };
    openPracticeModal(practiceData);
  }
  
  function bulkDeletePractices() {
    const checkedBoxes = document.querySelectorAll('.practice-row-checkbox:checked');
    const practiceIds = Array.from(checkedBoxes).map(cb => cb.value);
    
    if (practiceIds.length === 0) {
      alert('Please select practices to delete.');
      return;
    }
    
    if (confirm(`Are you sure you want to delete ${practiceIds.length} selected practice(s)?`)) {
      fetch('/practice-master/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': csrfToken
        },
        body: JSON.stringify({ practiceIds: practiceIds })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          loadPractices(); // Reload the table
        } else {
          alert('Error deleting practices: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error deleting practices');
      });
    }
  }
</script>

</body>
</html>
